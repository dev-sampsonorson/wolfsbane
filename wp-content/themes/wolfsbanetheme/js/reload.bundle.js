(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{180:function(e,t){var o,a,n,s,r,c,i,l;o={Etag:1,"Last-Modified":1,"Content-Length":1,"Content-Type":1},a={},n={},s={},r={},c=!1,i={html:1,css:1,js:1},l={heartbeat:function(){document.body&&(c||l.loadresources(),l.checkForChanges()),setTimeout(l.heartbeat,1e3)},loadresources:function(){function e(e){var t=document.location,o=new RegExp("^\\.|^/(?!/)|^[\\w]((?!://).)*$|"+t.protocol+"//"+t.host);return e.match(o)}for(var t=document.getElementsByTagName("script"),o=document.getElementsByTagName("link"),n=[],r=0;r<t.length;r++){var d=t[r].getAttribute("src");if(d&&e(d)&&n.push(d),d&&d.match(/\blive.js#/)){for(var u in i)i[u]=null!=d.match("[#,|]"+u);d.match("notify")&&alert("Live.js is loaded.")}}for(i.js||(n=[]),i.html&&n.push(document.location.href),r=0;r<o.length&&i.css;r++){var p=o[r],h=p.getAttribute("rel"),m=p.getAttribute("href",2);m&&h&&h.match(new RegExp("stylesheet","i"))&&e(m)&&(n.push(m),s[m]=p)}for(r=0;r<n.length;r++){var f=n[r];l.getHead(f,(function(e,t){a[e]=t}))}var v=document.getElementsByTagName("head")[0],g=document.createElement("style"),w="transition: all .3s ease-out;";css=[".livejs-loading * { ",w," -webkit-",w,"-moz-",w,"-o-",w,"}"].join(""),g.setAttribute("type","text/css"),v.appendChild(g),g.styleSheet?g.styleSheet.cssText=css:g.appendChild(document.createTextNode(css)),c=!0},checkForChanges:function(){for(var e in a)n[e]||l.getHead(e,(function(e,t){var o=a[e],n=!1;for(var s in a[e]=t,o){var r=o[s],c=t[s],i=t["Content-Type"];switch(s.toLowerCase()){case"etag":if(!c)break;default:n=r!=c}if(n){l.refreshResource(e,i);break}}}))},refreshResource:function(e,t){switch(t.toLowerCase()){case"text/css":var o=s[e],a=document.body.parentNode,n=o.parentNode,c=o.nextSibling,i=document.createElement("link");a.className=a.className.replace(/\s*livejs\-loading/gi,"")+" livejs-loading",i.setAttribute("type","text/css"),i.setAttribute("rel","stylesheet"),i.setAttribute("href",e+"?now="+1*new Date),c?n.insertBefore(i,c):n.appendChild(i),s[e]=i,r[e]=o,l.removeoldLinkElements();break;case"text/html":if(e!=document.location.href)return;case"text/javascript":case"application/javascript":case"application/x-javascript":document.location.reload()}},removeoldLinkElements:function(){var e=0;for(var t in r){try{var o=s[t],a=r[t],n=document.body.parentNode,c=o.sheet||o.styleSheet;(c.rules||c.cssRules).length>=0&&(a.parentNode.removeChild(a),delete r[t],setTimeout((function(){n.className=n.className.replace(/\s*livejs\-loading/gi,"")}),100))}catch(t){e++}e&&setTimeout(l.removeoldLinkElements,50)}},getHead:function(e,t){n[e]=!0;var a=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XmlHttp");a.open("HEAD",e,!0),a.onreadystatechange=function(){if(delete n[e],4==a.readyState&&304!=a.status){a.getAllResponseHeaders();var s={};for(var r in o){var c=a.getResponseHeader(r);"etag"==r.toLowerCase()&&c&&(c=c.replace(/^W\//,"")),"content-type"==r.toLowerCase()&&c&&(c=c.replace(/^(.*?);.*?$/i,"$1")),s[r]=c}t(e,s)}},a.send()}},"file:"!=document.location.protocol?(window.liveJsLoaded||l.heartbeat(),window.liveJsLoaded=!0):window.console&&console.log("Live.js doesn't support the file protocol. It needs http.")}},[[180,0]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,