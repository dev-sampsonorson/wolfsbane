(window.webpackJsonp = window.webpackJsonp || []).push([[7], { 1: function (t, e, i) { "use strict"; var s = function () { function t() { } return t.isChrome = function () { return /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor) }, t.isSafari = function () { return /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor) }, t.getOffset = function (e) { for (var i = 0, s = 0; e && !isNaN(e.offsetLeft) && !isNaN(e.offsetTop);)i += e.offsetLeft - e.scrollLeft, s += e.offsetTop - e.scrollTop, e = t.isChrome() || t.isSafari() ? e.parentNode : e.offsetParent; return { top: s, left: i } }, t.simulateClick = function (t) { var e = new MouseEvent("click", { bubbles: !0, cancelable: !0, view: window }); t.dispatchEvent(e) }, t.getClosest = function (t, e) { for (; t && t !== document; t = t.parentNode)if (t.matches(e)) return t; return null }, t.containsElement = function (t) { return t !== document.body && document.body.contains(t) }, t.containsElementById = function (t) { return document.getElementById(t) }, t.hasClass = function (t, e) { return (" " + t.className + " ").indexOf(" " + e + " ") > -1 }, t.getSiblings = function (t, e) { var i = [], s = t.parentNode.firstChild; do { if (!e || e(s)) { if (1 !== s.nodeType || s === t) continue; i.push(s) } } while (s = s.nextSibling); return i }, t.getNextSiblings = function (t, e) { for (var i = []; t = t.nextSibling;)if (!e || e(t)) { if (1 !== t.nodeType) continue; i.push(t) } return i }, t.getNextSibling = function (t, e) { for (; t = t.nextSibling;)if (!e || e(t)) { if (1 !== t.nodeType) continue; return t } return null }, t.getPreviousSiblings = function (t, e) { for (var i = []; t = t.previousSibling;)if (!e || e(t)) { if (1 !== t.nodeType) continue; i.push(t) } return i }, t.getPreviousSibling = function (t, e) { for (var i = t; i = i.previousSibling;)if (!e || e(i)) { if (1 !== i.nodeType) continue; return i } return null }, t.getViewportSize = function () { var t, e, i = "CSS1Compat" === document.compatMode ? document.documentElement : document.body; return void 0 !== i.clientWidth && (t = Math.max(i.clientWidth, ("innerWidth" in window ? window.innerWidth : 0) || 0), e = Math.max(i.clientHeight, ("innerHeight" in window ? window.innerHeight : 0) || 0)), { width: t, height: e } }, t }(); e.a = s }, 142: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/paradise-ikson.mp3" }, 143: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/undrunk-fletcher.mp3" }, 144: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/blow-my-mind-davido-chris-brown.mp3" }, 145: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/how-do-you-love-me-hardwell-snoop-dogg.mp3" }, 146: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/you-shaggy-alexander-stewart.mp3" }, 147: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/you-gotta-be-bombs-away-reigan.mp3" }, 148: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/paradise-ikson.ogg" }, 149: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/undrunk-fletcher.ogg" }, 150: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/blow-my-mind-davido-chris-brown.ogg" }, 151: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/how-do-you-love-me-hardwell-snoop-dogg.ogg" }, 152: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/you-shaggy-alexander-stewart.ogg" }, 153: function (t, e, i) { "use strict"; i.r(e), e.default = i.p + "audio/you-gotta-be-bombs-away-reigan.ogg" }, 155: function (t, e, i) { var s = { "./af": 8, "./af.js": 8, "./ar": 9, "./ar-dz": 10, "./ar-dz.js": 10, "./ar-kw": 11, "./ar-kw.js": 11, "./ar-ly": 12, "./ar-ly.js": 12, "./ar-ma": 13, "./ar-ma.js": 13, "./ar-sa": 14, "./ar-sa.js": 14, "./ar-tn": 15, "./ar-tn.js": 15, "./ar.js": 9, "./az": 16, "./az.js": 16, "./be": 17, "./be.js": 17, "./bg": 18, "./bg.js": 18, "./bm": 19, "./bm.js": 19, "./bn": 20, "./bn.js": 20, "./bo": 21, "./bo.js": 21, "./br": 22, "./br.js": 22, "./bs": 23, "./bs.js": 23, "./ca": 24, "./ca.js": 24, "./cs": 25, "./cs.js": 25, "./cv": 26, "./cv.js": 26, "./cy": 27, "./cy.js": 27, "./da": 28, "./da.js": 28, "./de": 29, "./de-at": 30, "./de-at.js": 30, "./de-ch": 31, "./de-ch.js": 31, "./de.js": 29, "./dv": 32, "./dv.js": 32, "./el": 33, "./el.js": 33, "./en-au": 34, "./en-au.js": 34, "./en-ca": 35, "./en-ca.js": 35, "./en-gb": 36, "./en-gb.js": 36, "./en-ie": 37, "./en-ie.js": 37, "./en-il": 38, "./en-il.js": 38, "./en-in": 39, "./en-in.js": 39, "./en-nz": 40, "./en-nz.js": 40, "./en-sg": 41, "./en-sg.js": 41, "./eo": 42, "./eo.js": 42, "./es": 43, "./es-do": 44, "./es-do.js": 44, "./es-us": 45, "./es-us.js": 45, "./es.js": 43, "./et": 46, "./et.js": 46, "./eu": 47, "./eu.js": 47, "./fa": 48, "./fa.js": 48, "./fi": 49, "./fi.js": 49, "./fil": 50, "./fil.js": 50, "./fo": 51, "./fo.js": 51, "./fr": 52, "./fr-ca": 53, "./fr-ca.js": 53, "./fr-ch": 54, "./fr-ch.js": 54, "./fr.js": 52, "./fy": 55, "./fy.js": 55, "./ga": 56, "./ga.js": 56, "./gd": 57, "./gd.js": 57, "./gl": 58, "./gl.js": 58, "./gom-deva": 59, "./gom-deva.js": 59, "./gom-latn": 60, "./gom-latn.js": 60, "./gu": 61, "./gu.js": 61, "./he": 62, "./he.js": 62, "./hi": 63, "./hi.js": 63, "./hr": 64, "./hr.js": 64, "./hu": 65, "./hu.js": 65, "./hy-am": 66, "./hy-am.js": 66, "./id": 67, "./id.js": 67, "./is": 68, "./is.js": 68, "./it": 69, "./it-ch": 70, "./it-ch.js": 70, "./it.js": 69, "./ja": 71, "./ja.js": 71, "./jv": 72, "./jv.js": 72, "./ka": 73, "./ka.js": 73, "./kk": 74, "./kk.js": 74, "./km": 75, "./km.js": 75, "./kn": 76, "./kn.js": 76, "./ko": 77, "./ko.js": 77, "./ku": 78, "./ku.js": 78, "./ky": 79, "./ky.js": 79, "./lb": 80, "./lb.js": 80, "./lo": 81, "./lo.js": 81, "./lt": 82, "./lt.js": 82, "./lv": 83, "./lv.js": 83, "./me": 84, "./me.js": 84, "./mi": 85, "./mi.js": 85, "./mk": 86, "./mk.js": 86, "./ml": 87, "./ml.js": 87, "./mn": 88, "./mn.js": 88, "./mr": 89, "./mr.js": 89, "./ms": 90, "./ms-my": 91, "./ms-my.js": 91, "./ms.js": 90, "./mt": 92, "./mt.js": 92, "./my": 93, "./my.js": 93, "./nb": 94, "./nb.js": 94, "./ne": 95, "./ne.js": 95, "./nl": 96, "./nl-be": 97, "./nl-be.js": 97, "./nl.js": 96, "./nn": 98, "./nn.js": 98, "./oc-lnc": 99, "./oc-lnc.js": 99, "./pa-in": 100, "./pa-in.js": 100, "./pl": 101, "./pl.js": 101, "./pt": 102, "./pt-br": 103, "./pt-br.js": 103, "./pt.js": 102, "./ro": 104, "./ro.js": 104, "./ru": 105, "./ru.js": 105, "./sd": 106, "./sd.js": 106, "./se": 107, "./se.js": 107, "./si": 108, "./si.js": 108, "./sk": 109, "./sk.js": 109, "./sl": 110, "./sl.js": 110, "./sq": 111, "./sq.js": 111, "./sr": 112, "./sr-cyrl": 113, "./sr-cyrl.js": 113, "./sr.js": 112, "./ss": 114, "./ss.js": 114, "./sv": 115, "./sv.js": 115, "./sw": 116, "./sw.js": 116, "./ta": 117, "./ta.js": 117, "./te": 118, "./te.js": 118, "./tet": 119, "./tet.js": 119, "./tg": 120, "./tg.js": 120, "./th": 121, "./th.js": 121, "./tk": 122, "./tk.js": 122, "./tl-ph": 123, "./tl-ph.js": 123, "./tlh": 124, "./tlh.js": 124, "./tr": 125, "./tr.js": 125, "./tzl": 126, "./tzl.js": 126, "./tzm": 127, "./tzm-latn": 128, "./tzm-latn.js": 128, "./tzm.js": 127, "./ug-cn": 129, "./ug-cn.js": 129, "./uk": 130, "./uk.js": 130, "./ur": 131, "./ur.js": 131, "./uz": 132, "./uz-latn": 133, "./uz-latn.js": 133, "./uz.js": 132, "./vi": 134, "./vi.js": 134, "./x-pseudo": 135, "./x-pseudo.js": 135, "./yo": 136, "./yo.js": 136, "./zh-cn": 137, "./zh-cn.js": 137, "./zh-hk": 138, "./zh-hk.js": 138, "./zh-mo": 139, "./zh-mo.js": 139, "./zh-tw": 140, "./zh-tw.js": 140 }; function a(t) { var e = n(t); return i(e) } function n(t) { if (!i.o(s, t)) { var e = new Error("Cannot find module '" + t + "'"); throw e.code = "MODULE_NOT_FOUND", e } return s[t] } a.keys = function () { return Object.keys(s) }, a.resolve = n, t.exports = a, a.id = 155 }, 181: function (t, e, i) { "use strict"; i.r(e); var s, a = i(3); !function (t) { t[t.TopRight = 0] = "TopRight", t[t.BottomRight = 1] = "BottomRight", t[t.TopLeft = 2] = "TopLeft", t[t.BottomLeft = 3] = "BottomLeft" }(s || (s = {})); var n = s, o = i(1), r = function () { function t(t, e, i, s) { var a, o, r = this; void 0 === t && (t = "home-hero-annotation"), void 0 === e && (e = ".c-hero-annotation__item"), void 0 === i && (i = ".c-hero-annotation__message"), void 0 === s && (s = ".c-hero-annotation__pointer"), this.containerId = t, this.itemSelector = e, this.messageSelector = i, this.pointerSelector = s, this.pointWidth = 20, this.pointHeight = 20, this.headerHeight = 71, this.pointVerticalOffset = 12, this.pointHorizontalOffset = 10, this.posToClassMap = new Map, this.posClassSearchExp = /\bc-hero-annotation__message--(top|bottom)(-{1})(left|right)\b/, this.posToClassMap.set(n.TopLeft, { className: "c-hero-annotation__message--top-left", strategy: this.topLeftIsValid }), this.posToClassMap.set(n.TopRight, { className: "c-hero-annotation__message--top-right", strategy: this.topRightIsValid }), this.posToClassMap.set(n.BottomLeft, { className: "c-hero-annotation__message--bottom-left", strategy: this.bottomLeftIsValid }), this.posToClassMap.set(n.BottomRight, { className: "c-hero-annotation__message--bottom-right", strategy: this.bottomRightIsValid }), this.viewPortWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0), this.viewPortHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0), this.containerEl = document.getElementById(this.containerId), this.itemEls = Array.from((null === (a = this.containerEl) || void 0 === a ? void 0 : a.querySelectorAll(e)) || []), this.messageEls = Array.from((null === (o = this.containerEl) || void 0 === o ? void 0 : o.querySelectorAll(i)) || []), this.positionAnnotations(), window.addEventListener("resize", (function (t) { r.viewPortWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0), r.viewPortHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0), r.positionAnnotations() })) } return t.prototype.positionAnnotations = function () { var t = this; this.itemEls.forEach((function (e) { for (var i = t.calcDistance(e, t.pointWidth, t.pointHeight, t.viewPortWidth, t.viewPortHeight), s = e.querySelector(t.messageSelector), a = 0; a < t.posToClassMap.size; a++) { var n = t.posToClassMap.get(a); if (n.strategy.call(t, i, s)) { t.replaceClasses(s, t.posClassSearchExp, n.className); break } } })) }, t.prototype.calcDistance = function (t, e, i, s, a) { var n = o.a.getOffset(t); return { top: n.top, bottom: a - (n.top + i), left: n.left, right: s - (n.left + e) } }, t.prototype.setViewPortDimension = function () { this.viewPortWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0), this.viewPortHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) }, t.prototype.replaceClasses = function (t, e, i) { void 0 === i && (i = ""), t instanceof HTMLElement && (t = [t]), (t instanceof Array || t instanceof NodeList || t instanceof HTMLAllCollection) && [].forEach.call(t, (function (t) { t.className = t.className.replace(e, i) })) }, t.prototype.topLeftIsValid = function (t, e) { var i = this.headerHeight + this.pointVerticalOffset; return e.offsetHeight < t.top - i && e.offsetWidth < t.left }, t.prototype.topRightIsValid = function (t, e) { var i = this.headerHeight + this.pointVerticalOffset; return e.offsetHeight < t.top - i && e.offsetWidth < t.right - this.pointHorizontalOffset }, t.prototype.bottomLeftIsValid = function (t, e) { return e.offsetHeight < t.bottom && e.offsetWidth < t.left }, t.prototype.bottomRightIsValid = function (t, e) { return e.offsetHeight < t.bottom && e.offsetWidth < t.right - this.pointHorizontalOffset }, t }(), l = i(6), d = i(2), u = i(7); i(142), i(143), i(144), i(145), i(146), i(147), i(148), i(149), i(150), i(151), i(152), i(153), window.addEventListener("DOMContentLoaded", (function (t) { new a.a, new r, new d.a({ targetId: "nav-primary-hamburger", navContainerTargetId: "nav-primary", toggleClass: "c-hamburger-toggler--clicked", overlayElClass: "c-hamburger-menu__overlay", overlayOpenClass: "c-hamburger-menu--open", itemElClass: "c-hamburger-menu__item", menuLevel2OpenClass: "c-hamburger-menu__level-2--open", menuLevel2ElClass: "c-hamburger-menu__level-2" }), new l.a({ targetId: "home-beats-medialist", dataAttrItemStateKey: "data-medialist-state", dataAttrMediaUrlMp3Key: "data-medialist-url-mp3", dataAttrMediaUrlOggKey: "data-medialist-url-ogg", dataAttrMediaUrlFallbackKey: "data-medialist-url-fallback", itemClass: "c-medialist__media", itemHoverClass: "c-medialist__media--hover", itemRemoveClass: "c-medialist__media--remove-border-bottom", mediaContainerClass: "c-medialist__the-media", progressFallbackClass: "c-medialist__progress-fallback", lineNumberElClass: "c-medialist__linenumber-instance", titleElClass: "c-medialist__title", artistELClass: "c-medialist__artist", durationElClass: "c-medialist__length-instance", playElClass: "c-medialist__play", pauseElClass: "c-medialist__pause", loadingClass: "c-medialist--loading", playlist: [{ linenumber: "01", title: "Great", artist: "Lil Baby Type", mp3Url: "./audio/paradise-ikson.mp3", oggUrl: "./audio/paradise-ikson.ogg", fallbackUrl: "./audio/paradise-ikson.mp3" }, { linenumber: "02", title: "Harder Than Ever", artist: "Jay Z", mp3Url: "./audio/undrunk-fletcher.mp3", oggUrl: "./audio/undrunk-fletcher.ogg", fallbackUrl: "./audio/undrunk-fletcher.mp3" }, { linenumber: "03", title: "Real Free Trap", artist: "Lil Baby x Quavo", mp3Url: "./audio/blow-my-mind-davido-chris-brown.mp3", oggUrl: "./audio/blow-my-mind-davido-chris-brown.ogg", fallbackUrl: "./audio/blow-my-mind-davido-chris-brown.mp3" }] }), new l.a({ targetId: "home-songs-medialist", dataAttrItemStateKey: "data-medialist-state", dataAttrMediaUrlMp3Key: "data-medialist-url-mp3", dataAttrMediaUrlOggKey: "data-medialist-url-ogg", dataAttrMediaUrlFallbackKey: "data-medialist-url-fallback", itemClass: "c-medialist__media", itemHoverClass: "c-medialist__media--hover", itemRemoveClass: "c-medialist__media--remove-border-bottom", mediaContainerClass: "c-medialist__the-media", progressFallbackClass: "c-medialist__progress-fallback", lineNumberElClass: "c-medialist__linenumber-instance", titleElClass: "c-medialist__title", artistELClass: "c-medialist__artist", durationElClass: "c-medialist__length-instance", playElClass: "c-medialist__play", pauseElClass: "c-medialist__pause", loadingClass: "c-medialist--loading", playlist: [{ linenumber: "01", title: "Memories", artist: "Maroon 5", mp3Url: "./audio/how-do-you-love-me-hardwell-snoop-dogg.mp3", oggUrl: "./audio/how-do-you-love-me-hardwell-snoop-dogg.ogg", fallbackUrl: "./audio/how-do-you-love-me-hardwell-snoop-dogg.mp3" }, { linenumber: "02", title: "Life Is Good", artist: "Future", mp3Url: "./audio/you-shaggy-alexander-stewart.mp3", oggUrl: "./audio/you-shaggy-alexander-stewart.ogg", fallbackUrl: "./audio/you-shaggy-alexander-stewart.mp3" }, { linenumber: "03", title: "Toosies Slide", artist: "Drake", mp3Url: "./audio/you-gotta-be-bombs-away-reigan.mp3", oggUrl: "./audio/you-gotta-be-bombs-away-reigan.ogg", fallbackUrl: "./audio/you-gotta-be-bombs-away-reigan.mp3" }] }), new u.a({ targetId: "c-video-youtube-player", dataAttrItemStateKey: "data-medialist-state", dataAttrMediaUrlMp3Key: "data-medialist-url-mp3", dataAttrMediaUrlOggKey: "data-medialist-url-ogg", dataAttrMediaUrlFallbackKey: "data-medialist-url-fallback", itemClass: "c-medialist__media", itemHoverClass: "c-medialist__media--hover", itemRemoveClass: "c-medialist__media--remove-border-bottom", mediaContainerClass: "c-medialist__the-media", progressFallbackClass: "c-medialist__progress-fallback", lineNumberElClass: "c-medialist__linenumber-instance", titleElClass: "c-medialist__title", artistELClass: "c-medialist__artist", durationElClass: "c-medialist__length-instance", playElClass: "c-medialist__play", pauseElClass: "c-medialist__pause", videoFrameContainerElClass: "c-video__screen-aspect-ratio-box-inner", videoFrameElClass: "c-video__instance", videoFramePlaceHolderTargetId: "home-youtubelist-video-frame-placeholder", loadingClass: "c-medialist--loading", playlist: [{ linenumber: "01", title: 'Garage House Deconstruction in Ableton Live - Danny J Lewis "Baby Don\'t Get 2 Close"', artist: "Music Production Tutorials", url: "https://www.youtube.com/embed/IAg90WytoOs", videoId: "IAg90WytoOs" }, { linenumber: "02", title: "Learn music theory in half an hour", artist: "Andrew Huang", url: "https://www.youtube.com/embed/rgaTLrZGlk0", videoId: "rgaTLrZGlk0" }, { linenumber: "03", title: "Hip Hop Production: Masterclass with Focus", artist: "Wave Audio", url: "https://www.youtube.com/embed/0C3kVyxZ11A", videoId: "0C3kVyxZ11A" }, { linenumber: "04", title: "How To Build A Home Studio For Under $350", artist: "Recording Revolution", url: "https://www.youtube.com/embed/XLXSqan3Jcs", videoId: "XLXSqan3Jcs" }] }), console.log("DOM fully loaded and parsed") })) }, 2: function (t, e, i) { "use strict"; var s = function (t) { var e = this; this.config = t, this.hamburgerEl = document.getElementById(this.config.targetId), this.navContainerEl = document.getElementById(this.config.navContainerTargetId), this.overlayEl = this.navContainerEl.querySelector(":scope ." + this.config.overlayElClass), this.itemEls = Array.from(this.navContainerEl.querySelectorAll(":scope ." + this.config.itemElClass)); for (var i = function (t) { s.itemEls[t].addEventListener("click", (function (i) { var s = e.itemEls[t].querySelector(":scope ." + e.config.menuLevel2ElClass); null == s || s.classList.toggle(e.config.menuLevel2OpenClass) })) }, s = this, a = 0; a < this.itemEls.length; a++)i(a); this.hamburgerEl.addEventListener("click", (function (t) { e.navContainerEl.classList.toggle(e.config.toggleClass), e.navContainerEl.classList.contains(e.config.toggleClass) ? window.setTimeout((function () { e.navContainerEl.classList.add(e.config.overlayOpenClass) }), 500) : (Array.from(e.navContainerEl.querySelectorAll(":scope ." + e.config.menuLevel2ElClass)).forEach((function (t) { t.classList.remove(e.config.menuLevel2OpenClass) })), window.setTimeout((function () { e.navContainerEl.classList.remove(e.config.overlayOpenClass) }), 500)) })) }; e.a = s }, 3: function (t, e, i) { "use strict"; var s, a = i(5); !function (t) { t[t.Open = 0] = "Open", t[t.Active = 1] = "Active" }(s || (s = {})); var n = s, o = function () { function t(t, e, i, s) { var o, r, l, d, u = this; void 0 === t && (t = "c-nav-primary__item"), void 0 === e && (e = "c-nav-primary__link"), void 0 === i && (i = "c-nav-primary__level-2"), void 0 === s && (s = "c-nav-primary__item--has-childen"), this.itemClass = t, this.linkClass = e, this.level2Class = i, this.hasChildrenClass = s, this.openIndicatorHeight = 5, this.activeIndicatorHeight = 20, this.mouseEnterHandlerExecuting = !1, this.mouseLeaveHandlerExecuting = !1; a.join(["Hello", "webpack"], " "); this.rootEl = document.getElementById("nav-primary"), this.activeMenuId = (null === (o = document.querySelector("body")) || void 0 === o ? void 0 : o.dataset.navPrimaryActiveMenuId) || null, this.activeMenuItemEl = (null === (r = this.rootEl) || void 0 === r ? void 0 : r.querySelector("#" + this.activeMenuId)) || null, this.menuItemListEl = null === (l = this.rootEl) || void 0 === l ? void 0 : l.querySelectorAll("." + this.hasChildrenClass), null === (d = this.menuItemListEl) || void 0 === d || d.forEach((function (t, e) { null == t || t.addEventListener("mouseenter", u.mouseEnterHandler.bind(u), !1), null == t || t.addEventListener("mouseleave", u.mouseLeaveHandler.bind(u), !1) })), this.expandIndicator(n.Active, this.activeMenuItemEl) } return t.prototype.createOpenIndicator = function () { var t; return (t = document.createElement("span")).classList.add("c-nav-primary__open-indicator"), t }, t.prototype.createActiveIndicator = function () { var t; return (t = document.createElement("span")).classList.add("c-nav-primary__active-indicator"), t }, t.prototype.getOpenIndicator = function (t) { return t.querySelector(".c-nav-primary__open-indicator") }, t.prototype.getActiveIndicator = function (t) { return t.querySelector(".c-nav-primary__active-indicator") }, t.prototype.mouseEnterHandler = function (t) { var e = this, i = t.target; (t.stopPropagation(), this.mouseEnterHandlerExecuting) || i.classList.contains("" + this.hasChildrenClass) && (this.mouseEnterHandlerExecuting = !0, "true" === i.getAttribute("data-open") || this.expandIndicator(n.Open, i, (function (t) { var s; null === (s = i.querySelector("." + e.level2Class)) || void 0 === s || s.classList.add(e.level2Class + "--open"), t.setAttribute("data-open", "true"), e.mouseEnterHandlerExecuting = !1 }))) }, t.prototype.mouseLeaveHandler = function (t) { var e = this, i = t.target; (t.stopPropagation(), this.mouseLeaveHandlerExecuting) || i.classList.contains("" + this.hasChildrenClass) && (this.mouseLeaveHandlerExecuting = !0, "true" === i.getAttribute("data-open") && this.collapseIndicator(n.Open, i, (function (t) { var i; null === (i = t.querySelector("." + e.level2Class)) || void 0 === i || i.classList.remove(e.level2Class + "--open"), t.setAttribute("data-open", "false"), e.mouseLeaveHandlerExecuting = !1 }))) }, t.prototype.expandIndicator = function (t, e, i) { void 0 === i && (i = null); var s = null, a = null, o = t === n.Open, r = t === n.Active; if (o && (s = this.createOpenIndicator(), a = this.openIndicatorHeight), r && (s = this.createActiveIndicator(), a = this.activeIndicatorHeight), null !== s && null !== a) { s.style.height = "0px", e.querySelector("." + this.linkClass).appendChild(s); s.clientHeight; s.style.height = a + "px", i && i.call(this, e) } }, t.prototype.collapseIndicator = function (t, e, i) { if (void 0 === i && (i = null), t !== n.Active) { var s = this.getOpenIndicator(e), a = this.openIndicatorHeight; if (null !== s && null !== a) { var o = s.style.transition; s.style.transition = "", requestAnimationFrame((function () { s.style.height = a + "px", s.style.transition = o, requestAnimationFrame((function () { s.style.height = "0px" })) })); var r = function (t) { s.removeEventListener("transitionend", r.bind(this)), s.removeAttribute("style"), s.remove() }; s.addEventListener("transitionend", r.bind(this)), i && i.call(this, e, r) } } }, t }(); e.a = o }, 4: function (t, e, i) { "use strict"; var s = function () { function t(t, e) { var i = this; void 0 === e && (e = "../wwwroot/images/playing-equalizer.gif"), this.equalizerEl = t, this.cImageSrc = e, this.cSpeed = 14, this.cWidth = 31, this.cHeight = 11, this.cTotalFrames = 11, this.cFrameWidth = 31, this.cImageTimeout = 0, this.cIndex = 0, this.cXpos = 0, this.cPreloaderTimeout = 0, this.SECONDS_BETWEEN_FRAMES = 0, clearTimeout(this.cImageTimeout), this.cImageTimeout = 0; var s = new window.Image; s.onload = function () { i.cImageTimeout = window.setTimeout(i.startAnimation.bind(i), 0) }, s.onerror = function (t, e) { console.log("Could not load the image") }, s.src = this.cImageSrc } return t.prototype.startAnimation = function () { var t = Math.round(100 / this.cSpeed); this.SECONDS_BETWEEN_FRAMES = 1 / t, this.cPreloaderTimeout = window.setTimeout(this.continueAnimation.bind(this), this.SECONDS_BETWEEN_FRAMES / 1e3) }, t.prototype.continueAnimation = function () { this.cXpos += this.cFrameWidth, this.cIndex += 1, this.cIndex >= this.cTotalFrames && (this.cXpos = 0, this.cIndex = 0), this.equalizerEl && (this.equalizerEl.style.backgroundPosition = -this.cXpos + "px 0"), this.cPreloaderTimeout = window.setTimeout(this.continueAnimation.bind(this), 1e3 * this.SECONDS_BETWEEN_FRAMES) }, t.prototype.stopAnimation = function () { clearTimeout(this.cPreloaderTimeout), this.cPreloaderTimeout = !1 }, t }(); e.a = s }, 6: function (t, e, i) { "use strict"; var s, a = i(1), n = i(4); !function (t) { t.Idle = "idle", t.Playing = "playing", t.Paused = "paused" }(s || (s = {})); var o = function () { function t(t) { var e, i, a, n = this; this.config = t, this.audioEls = [], this.durationEls = [], this.lineNumberEls = [], this.artistEls = [], this.titleEls = [], this.playEls = [], this.pauseEls = [], this.playlist = this.config.playlist, this.equalizerEl = null, this.animatedEqualizer = null, this.targetEl = document.getElementById(this.config.targetId), this.itemEls = Array.from((null === (e = this.targetEl) || void 0 === e ? void 0 : e.querySelectorAll(":scope > ." + this.config.itemClass)) || []), null === (i = this.targetEl) || void 0 === i || i.classList.add(this.config.loadingClass), this.prepareMediaSources(this.itemEls), this.changeStates(this.itemEls, s.Idle), this.itemEls.forEach((function (t, e) { null == t || t.addEventListener("mouseenter", n.mouseEnterHandler.bind(n), !1), null == t || t.addEventListener("mouseleave", n.mouseLeaveHandler.bind(n), !1) })), null === (a = this.targetEl) || void 0 === a || a.classList.remove(this.config.loadingClass) } return t.prototype.prepareMediaSources = function (t) { for (var e = this, i = function (t) { var i, n = a.itemEls[t], o = document.createElement("audio"), r = a.playlist[t].mp3Url, l = a.playlist[t].oggUrl, d = a.playlist[t].fallbackUrl; if (n.setAttribute("data-index", t.toString()), null === r && null === l && null === d) return "break"; (a.audioEls[t] = o, a.durationEls[t] = n.querySelector(":scope ." + a.config.durationElClass), a.lineNumberEls[t] = n.querySelector(":scope ." + a.config.lineNumberElClass), a.artistEls[t] = n.querySelector(":scope ." + a.config.artistELClass), a.titleEls[t] = n.querySelector(":scope ." + a.config.titleElClass), a.playEls[t] = n.querySelector(":scope ." + a.config.playElClass), a.pauseEls[t] = n.querySelector(":scope ." + a.config.pauseElClass), a.lineNumberEls[t].innerHTML = a.playlist[t].linenumber, a.artistEls[t].innerHTML = a.playlist[t].artist, a.artistEls[t].setAttribute("title", a.playlist[t].artist), a.titleEls[t].innerHTML = a.playlist[t].title, a.titleEls[t].setAttribute("title", a.playlist[t].title), a.playEls[t].addEventListener("click", (function (t) { e.toPlayState(o, n) })), a.pauseEls[t].addEventListener("click", (function (t) { e.toPausedState(o, n) })), o.addEventListener("ended", (function (t) { e.changeState(n, s.Idle) })), o.volume = 1, o.setAttribute("preload", "metadata"), a.registerEvents(o, n), o.canPlayType("audio/mpeg")) && ((i = document.createElement("source")).setAttribute("src", r), i.setAttribute("type", "audio/mpeg"), o.insertAdjacentElement("beforeend", i)); o.canPlayType("audio/ogg") && ((i = document.createElement("source")).setAttribute("src", l), i.setAttribute("type", "audio/mpeg"), o.insertAdjacentElement("beforeend", i)); if (null !== d && "" !== d) { var u = document.createElement("a"), c = document.createTextNode("download audio"); u.appendChild(c), u.setAttribute("href", d), o.insertAdjacentElement("beforeend", u) } var m = n.querySelector("." + a.config.mediaContainerClass); null === m && ((m = document.createElement("div")).classList.add(a.config.mediaContainerClass), n.insertAdjacentElement("afterbegin", m)), m.appendChild(o) }, a = this, n = 0; n < t.length; n++) { if ("break" === i(n)) break } }, t.prototype.registerEvents = function (t, e) { var i = this, s = e.getAttribute("data-index"); t.addEventListener("loadedmetadata", (function (e) { i.durationEls[s].innerHTML = i.toMinutesAndSeconds(t.duration).minutesAndSeconds })), t.addEventListener("timeupdate", (function (e) { t.readyState >= 2 && (i.durationEls[s].innerHTML = i.toMinutesAndSeconds(t.currentTime).minutesAndSeconds) })) }, t.prototype.toMinutesAndSeconds = function (t) { var e = Math.trunc(t / 60).toString().toString().padStart(2, "0"), i = Math.floor(t % 60).toString().padStart(2, "0"); return { minutes: e, seconds: i, minutesAndSeconds: e + ":" + i } }, t.prototype.toPausedState = function (t, e) { t.pause(), this.changeState(e, s.Paused), this.stopFallbackEqualizer() }, t.prototype.toPlayState = function (t, e) { for (var i = this, a = 0; a < this.audioEls.length; a++)this.isPlaying(this.audioEls[a]) && this.toPausedState(this.audioEls[a], this.itemEls[a]); t.addEventListener("loadeddata", (function (a) { t.readyState >= 2 && (t.play(), i.changeState(e, s.Playing)) })), t.currentTime > 0 && t.paused ? (t.play(), this.changeState(e, s.Playing)) : t.load(), this.startFallbackEqualizer(e) }, t.prototype.changeState = function (t, e) { t.setAttribute(this.config.dataAttrItemStateKey, e) }, t.prototype.changeStates = function (t, e) { for (var i = 0; i < t.length; i++)this.changeState(t[i], e) }, t.prototype.isPlaying = function (t) { return t.duration > 0 && t.currentTime > 0 && !t.paused && !t.ended && t.readyState > 2 }, t.prototype.mouseEnterHandler = function (t) { var e = this, i = t.target; if (i.classList.contains("" + this.config.itemClass)) { t.stopPropagation(); var s = a.a.getPreviousSibling(i, (function (t) { return 1 === t.nodeType && t.classList.contains("" + e.config.itemClass) })); null !== s && s.classList.add(this.config.itemClass + "--remove-border-bottom"), i.classList.add("" + this.config.itemHoverClass) } }, t.prototype.mouseLeaveHandler = function (t) { var e = this, i = t.target; if (i.classList.contains("" + this.config.itemClass)) { t.stopPropagation(); var s = a.a.getPreviousSibling(i, (function (t) { return 1 === t.nodeType && t.classList.contains("" + e.config.itemClass) })); null !== s && a.a.hasClass(s, this.config.itemClass + "--remove-border-bottom") && s.classList.remove(this.config.itemClass + "--remove-border-bottom"), i.classList.remove("" + this.config.itemHoverClass) } }, t.prototype.stopFallbackEqualizer = function () { null !== this.equalizerEl && null !== this.animatedEqualizer && (this.animatedEqualizer.stopAnimation(), this.equalizerEl = this.animatedEqualizer = null) }, t.prototype.startFallbackEqualizer = function (t) { var e; (null === (e = document.querySelector("html")) || void 0 === e ? void 0 : e.classList.contains("no-svg")) && (this.equalizerEl = t.querySelector(":scope ." + this.config.progressFallbackClass), this.animatedEqualizer = new n.a(this.equalizerEl)) }, t }(); e.a = o }, 7: function (t, e, i) { "use strict"; var s, a, n = i(1), o = i(4), r = i(141), l = i.n(r), d = i(0), u = i.n(d); i(156); !function (t) { t.Idle = "idle", t.Playing = "playing", t.Paused = "paused", t.Buffering = "buffering" }(s || (s = {})), function (t) { t[t.Unstarted = -1] = "Unstarted", t[t.Ended = 0] = "Ended", t[t.Playing = 1] = "Playing", t[t.Paused = 2] = "Paused", t[t.Buffering = 3] = "Buffering", t[t.VideoCued = 5] = "VideoCued" }(a || (a = {})); var c = function () { function t(t) { var e, i, a = this; this.config = t, this.API_KEY ="AIzaSyBXg4R4SWJZlypnzTa21v63QNkTAIu1GVg",this.itemEls=[],this.audioEls=[],this.durationEls=[],this.lineNumberEls=[],this.titleEls=[],this.artistEls=[],this.playEls=[],this.pauseEls=[],this.playlist=[],this.equalizerEl=null,this.animatedEqualizer=null,this.currentVideoId=null,this.theVideos=[],this.videoDurations=[],this.currentTimes=[],this.videoData=new Map,this.playlist=this.config.playlist,this.targetEl=document.getElementById(this.config.targetId),this.itemEls=Array.from((null===(e=this.targetEl)||void 0===e?void 0:e.querySelectorAll(":scope ."+this.config.itemClass))||[]),null===(i=this.targetEl)||void 0===i||i.classList.add(this.config.loadingClass),this.changeStates(this.itemEls,s.Idle),this.eventRegistrationItemEls(this.itemEls),this.prepareMediaSources(this.itemEls).then((function(t){var e;a.theVideos=t,null===(e=a.targetEl)||void 0===e||e.classList.remove(a.config.loadingClass),a.setupPlayer(a.changeCurrentVideoId(a.theVideos[0]))})).catch((function(t){console.log("error",t)}))}return t.prototype.changeCurrentVideoId=function(t){return this.currentVideoId=t,this.currentVideoId},t.prototype.setupPlayer=function(t){var e=this;this.theVideos.indexOf(t);this.player=l()(this.config.videoFramePlaceHolderTargetId,{videoId:t,height:"100%",width:"100%",playerVars:{autoplay:0,rel:0,showinfo:0,egm:0,showsearch:0,controls:1,modestbranding:1,iv_load_policy:3}}),this.player.setVolume(100),this.player.on("ready",(function(t){var i=e.theVideos.indexOf(t.target.getVideoData().video_id);e.changeState(e.itemEls[i],s.Paused)})),this.player.on("stateChange",(function(t){var i=e.theVideos.indexOf(t.target.getVideoData().video_id);t.data===a.Buffering?e.changeState(e.itemEls[i],s.Buffering):t.data===a.Playing?e.changeState(e.itemEls[i],s.Playing):t.data===a.Paused?e.changeState(e.itemEls[i],s.Paused):t.data===a.Ended?e.changeState(e.itemEls[i],s.Idle):t.data===a.Unstarted||t.data===a.VideoCued&&e.changeState(e.itemEls[i],s.Paused)}))},t.prototype.eventRegistrationItemEls=function(t){for(var e,i,s=0;s<t.length;s++)null===(e=t[s])||void 0===e||e.addEventListener("mouseenter",this.mouseEnterHandler.bind(this),!1),null===(i=t[s])||void 0===i||i.addEventListener("mouseleave",this.mouseLeaveHandler.bind(this),!1)},t.prototype.prepareMediaSources=function(t){var e=this;return new Promise((function(i,s){for(var a=[],n=function(t){a[t]=new Promise((function(i,s){var a=e.itemEls[t],n=e.playlist[t].videoId;a.setAttribute("data-index",t.toString()),null!==n&&""!==n.trim()||s(),fetch("https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id="+n+"&key="+e.API_KEY,{method:"GET"}).then((function(t){return t.ok?t.json():Promise.reject(t)})).then((function(s){var o=s.items[0].contentDetails;e.videoData.set(n,""),e.durationEls[t]=a.querySelector(":scope ."+e.config.durationElClass),e.lineNumberEls[t]=a.querySelector(":scope ."+e.config.lineNumberElClass),e.artistEls[t]=a.querySelector(":scope ."+e.config.artistELClass),e.titleEls[t]=a.querySelector(":scope ."+e.config.titleElClass),e.playEls[t]=a.querySelector(":scope ."+e.config.playElClass),e.pauseEls[t]=a.querySelector(":scope ."+e.config.pauseElClass),e.lineNumberEls[t].innerHTML=e.playlist[t].linenumber,e.artistEls[t].innerHTML=e.playlist[t].artist,e.artistEls[t].setAttribute("title",e.playlist[t].artist),e.titleEls[t].innerHTML=e.playlist[t].title,e.titleEls[t].setAttribute("title",e.playlist[t].title),e.currentTimes[t]=0,e.videoDurations[t]=e.durationEls[t].innerHTML=u.a.duration(o.duration).format("hh:mm:ss"),e.playEls[t].addEventListener("click",(function(t){null!==e.player&&e.toPlayState(n,a)})),e.pauseEls[t].addEventListener("click",(function(t){e.toPausedState(n,a)})),i(n)})).catch((function(t){s(Error("Couldn't initialize video: "+n))}))}))},o=0;o<t.length;o++)n(o);Promise.all(a).then((function(t){i(t)})).catch((function(t){s(Error("Couldn't initialize configured playlist"))}))}))},t.prototype.showLiveTimeElapsed=function(){var t=this,e=this.theVideos.indexOf(this.currentVideoId);this.durationEls[e].innerText=this.toMinutesAndSeconds(this.currentTimes[e]).minutesAndSeconds,this.liveTimeElapsedInterval=window.setInterval((function(){var e=t.theVideos.indexOf(t.currentVideoId);t.player.getCurrentTime().then((function(i){void 0!==i&&(0===i&&t.currentTimes[e]>0||(t.durationEls[e].innerText=t.toMinutesAndSeconds(i).minutesAndSeconds))}))}),100)},t.prototype.toElapsedTimeInHoursMinutes=function(t){return u()(t,"seconds").format("hh:mm:ss")},t.prototype.toMinutesAndSeconds=function(t){var e=Math.trunc(t/60).toString().toString().padStart(2,"0"),i=Math.floor(t%60).toString().padStart(2,"0");return{minutes:e,seconds:i,minutesAndSeconds:e+":"+i}},t.prototype.toPausedState=function(t,e){var i=this;this.player.pauseVideo().then((function(t){window.clearInterval(i.liveTimeElapsedInterval),i.stopFallbackEqualizer()}))},t.prototype.toPlayState=function(t,e){var i=this,n=null;this.player.getPlayerState().then((function(t){if(t===a.Playing||t===a.Buffering){var e=i.theVideos.indexOf(i.currentVideoId);i.player.pauseVideo(),i.changeState(i.itemEls[e],s.Paused)}return t})).then((function(a){i.currentVideoId===t?(n=i.theVideos.indexOf(t),i.player.seekTo(i.currentTimes[n],!0),i.player.playVideo()):(i.currentVideoId=t,n=Number(e.getAttribute("data-index")),i.getState(e)===s.Paused?(i.player.seekTo(i.currentTimes[n],!0),i.player.loadVideoById(t,i.currentTimes[n])):(i.currentTimes[n]=0,i.player.loadVideoById(t,i.currentTimes[n]))),window.clearInterval(i.liveTimeElapsedInterval),i.showLiveTimeElapsed()}))},t.prototype.changeState=function(t,e){var i=this;if(e===s.Paused&&this.player.getCurrentTime().then((function(e){var s=+t.getAttribute("data-index");void 0!==e&&(0===e&&i.currentTimes[s]>0||(i.currentTimes[s]=e))})),e===s.Idle){var a=+t.getAttribute("data-index");this.currentTimes[a]=0,void 0!==this.videoDurations[a]&&(this.durationEls[a].innerText=this.videoDurations[a]),window.clearInterval(this.liveTimeElapsedInterval)}t.setAttribute(this.config.dataAttrItemStateKey,e)},t.prototype.changeStates=function(t,e){for(var i=0;i<t.length;i++)this.changeState(t[i],e)},t.prototype.getState=function(t){return t.getAttribute(this.config.dataAttrItemStateKey)},t.prototype.isPlaying=function(t){return t.getAttribute(this.config.dataAttrItemStateKey)===s.Playing},t.prototype.stopFallbackEqualizer=function(){null!==this.equalizerEl&&null!==this.animatedEqualizer&&(this.animatedEqualizer.stopAnimation(),this.equalizerEl=this.animatedEqualizer=null)},t.prototype.startFallbackEqualizer=function(t){var e;(null===(e=document.querySelector("html"))||void 0===e?void 0:e.classList.contains("no-svg"))&&(this.equalizerEl=t.querySelector(":scope ."+this.config.progressFallbackClass),this.animatedEqualizer=new o.a(this.equalizerEl))},t.prototype.mouseEnterHandler=function(t){var e=this,i=t.target;if(i.classList.contains(""+this.config.itemClass)){t.stopPropagation();var s=n.a.getPreviousSibling(i,(function(t){return 1===t.nodeType&&t.classList.contains(""+e.config.itemClass)}));null!==s&&s.classList.add(this.config.itemClass+"--remove-border-bottom"),i.classList.add(""+this.config.itemHoverClass)}},t.prototype.mouseLeaveHandler=function(t){var e=this,i=t.target;if(i.classList.contains(""+this.config.itemClass)){t.stopPropagation();var s=n.a.getPreviousSibling(i,(function(t){return 1===t.nodeType&&t.classList.contains(""+e.config.itemClass)}));null!==s&&n.a.hasClass(s,this.config.itemClass+"--remove-border-bottom")&&s.classList.remove(this.config.itemClass+"--remove-border-bottom"),i.classList.remove(""+this.config.itemHoverClass)}},t}();e.a=c}},[[181,0,1]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,