///*------------------------------------*\
//    #MIXINS
//\*------------------------------------*/

// Global mixins available to the entire project. Define file-specific
// mixins inside the file to which they relate.

// Mixin to create a declaration whose value is a rem unit. Also provide pixel fallback.
//
// .simple-usage {
//   @include rem(padding, 10px);
// }

@mixin rem($property, $value) {
    #{$property}: $value;
    #{$property}: rem($value);
}

// Mixin to drop micro clearfix into a selector.
//
// .simple-usage {
//   @include clearfix();
// }
//
// .detailed-usage {
//   @include clearfix(important);
// }

@mixin clearfix($important: false) {
    // Determine whether or not to make declarations important.
    @if $important == false {
        $important: null;
    }
    @else {
        $important: !important;
    }

    &:after {
        content: "" $important;
        display: table $important;
        clear: both $important;
    }
}

@mixin remove-margin($side: "all") {
    @if $side == "top" {
        margin-top: 0;
    }
    @else if $side == "right" {
        margin-right: 0;
    }
    @else if $side == "bottom" {
        margin-bottom: 0;
    }
    @else if $side == "left" {
        margin-left: 0;
    }
    @else if $side == "all" {
        margin: 0;
    }
    @else {
        @warn "#{$side} is not a valid margin side.";
    }
}

// @include calc("width", "100% - #{$image-size}");
@mixin calc($key, $value) {
    // #{$key}: -webkit-calc(#{$value});
    // #{$key}: -moz-calc(#{$value});
    #{$key}: calc(#{$value});
}

@mixin min-height($value) {
    min-height: $value;
    height: auto !important;
    height: $value;
}

// Generate `:hover` and `:focus` styles in one go.
/* @mixin hocus {
    &:hover,
    &:focus {
        @content;
    }
} */

@mixin hover {
    &:hover {
        @content;
    }
}

@mixin hover-focus {
    &:hover,
    &:focus {
        @content;
    }
}

@mixin plain-hover-focus {
    &,
    &:hover,
    &:focus {
        @content;
    }
}

@mixin hover-focus-active {
    &:hover,
    &:focus,
    &:active {
        @content;
    }
}

@mixin center-absolute-h {
    left: 0;
    right: 0;
    margin: auto;
}

@mixin visually-hidden {
    position: absolute;
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    width: 1px;
}

@mixin text-selection-none {
    user-select: none; /* supported by Chrome and Opera */
    -webkit-user-select: none; /* Safari */
    -khtml-user-select: none; /* Konqueror HTML */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none;
}

@mixin text-selection-text {
    user-select: text; /* supported by Chrome and Opera */
    -webkit-user-select: text; /* Safari */
    -khtml-user-select: text; /* Konqueror HTML */
    -moz-user-select: text; /* Firefox */
    -ms-user-select: text;
}

@mixin text-selection-all {
    user-select: all; /* supported by Chrome and Opera */
    -webkit-user-select: all; /* Safari */
    -khtml-user-select: all; /* Konqueror HTML */
    -moz-user-select: all; /* Firefox */
    -ms-user-select: all;
}

@mixin text-selection-auto {
    user-select: auto; /* supported by Chrome and Opera */
    -webkit-user-select: auto; /* Safari */
    -khtml-user-select: auto; /* Konqueror HTML */
    -moz-user-select: auto; /* Firefox */
    -ms-user-select: auto;
}

@mixin text-selection-contain {
    user-select: contain;
    -webkit-user-select: contain;
    -khtml-user-select: contain;
    -moz-user-select: contain;
    -ms-user-select: element; /*Only IE supports user-select contain option*/
}
